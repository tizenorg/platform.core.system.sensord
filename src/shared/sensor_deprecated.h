/*
 * sensord
 *
 * Copyright (c) 2016 Samsung Electronics Co., Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

#ifndef __SENSOR_DEPRECATED_H__
#define __SENSOR_DEPRECATED_H__

#ifdef __cplusplus
extern "C"
{
#endif

// Sensor Event Types
enum event_types_t {
	ACCELEROMETER_RAW_DATA_EVENT												= (ACCELEROMETER_SENSOR << 16) | 0x0001,
	ACCELEROMETER_UNPROCESSED_DATA_EVENT						  = (ACCELEROMETER_SENSOR << 16) | 0x0002,

	GYROSCOPE_RAW_DATA_EVENT		  = (GYROSCOPE_SENSOR << 16) | 0x0001,
	GYROSCOPE_UNPROCESSED_DATA_EVENT		  = (GYROSCOPE_SENSOR << 16) | 0x0002,

	GEOMAGNETIC_RAW_DATA_EVENT		= (GEOMAGNETIC_SENSOR << 16) | 0x0001,
	GEOMAGNETIC_UNPROCESSED_DATA_EVENT		= (GEOMAGNETIC_SENSOR << 16) | 0x0002,

	PROXIMITY_CHANGE_STATE_EVENT	 = (PROXIMITY_SENSOR << 16) | 0x0001,
	PROXIMITY_STATE_EVENT	= (PROXIMITY_SENSOR << 16) | 0x0002,
	PROXIMITY_DISTANCE_DATA_EVENT	= (PROXIMITY_SENSOR << 16) | 0x0003,

	PRESSURE_RAW_DATA_EVENT			= (PRESSURE_SENSOR << 16) | 0x0001,

	TEMPERATURE_RAW_DATA_EVENT		= (TEMPERATURE_SENSOR << 16) | 0x0001,

	LIGHT_LUX_DATA_EVENT	 = (LIGHT_SENSOR << 16) | 0x0001,
	LIGHT_LEVEL_DATA_EVENT  = (LIGHT_SENSOR << 16) | 0x0002,
	LIGHT_CHANGE_LEVEL_EVENT		  = (LIGHT_SENSOR << 16) | 0x0003,

	ROTATION_VECTOR_RAW_DATA_EVENT  = (ROTATION_VECTOR_SENSOR << 16) | 0x0001,

	RV_RAW_RAW_DATA_EVENT	= (RV_RAW_SENSOR << 16) | 0x0001,

	ULTRAVIOLET_RAW_DATA_EVENT		= (ULTRAVIOLET_SENSOR << 16) | 0x0001,

	AUTO_ROTATION_CHANGE_STATE_EVENT = (AUTO_ROTATION_SENSOR << 16) | 0x0001,

	BIO_LED_RED_RAW_DATA_EVENT		= (BIO_LED_RED_SENSOR << 16) | 0x0001,

	GAMING_RV_RAW_DATA_EVENT		  = (GYROSCOPE_RV_SENSOR << 16) | 0x0001,

	GEOMAGNETIC_RV_RAW_DATA_EVENT	= (GEOMAGNETIC_RV_SENSOR << 16) | 0x0001,

	GRAVITY_RAW_DATA_EVENT  = (GRAVITY_SENSOR << 16) | 0x0001,

	LINEAR_ACCEL_RAW_DATA_EVENT	  = (LINEAR_ACCEL_SENSOR << 16) | 0x0001,

	MOTION_ENGINE_EVENT_SNAP										  = (MOTION_SENSOR << 16) | 0x0001,
	MOTION_ENGINE_EVENT_SHAKE										 = (MOTION_SENSOR << 16) | 0x0002,
	MOTION_ENGINE_EVENT_DOUBLETAP						 = (MOTION_SENSOR << 16) | 0x0004,
	MOTION_ENGINE_EVENT_PANNING									  = (MOTION_SENSOR << 16) | 0x0008,
	MOTION_ENGINE_EVENT_TOP_TO_BOTTOM					= (MOTION_SENSOR << 16) | 0x0010,
	MOTION_ENGINE_EVENT_DIRECT_CALL					  = (MOTION_SENSOR << 16) | 0x0020,
	MOTION_ENGINE_EVENT_TILT_TO_UNLOCK				  = (MOTION_SENSOR << 16) | 0x0040,
	MOTION_ENGINE_EVENT_LOCK_EXECUTE_CAMERA = (MOTION_SENSOR << 16) | 0x0080,
	MOTION_ENGINE_EVENT_SMART_ALERT					  = (MOTION_SENSOR << 16) | 0x0100,
	MOTION_ENGINE_EVENT_TILT										  = (MOTION_SENSOR << 16) | 0x0200,
	MOTION_ENGINE_EVENT_PANNING_BROWSE				  = (MOTION_SENSOR << 16) | 0x0400,
	MOTION_ENGINE_EVENT_NO_MOVE									  = (MOTION_SENSOR << 16) | 0x0800,
	MOTION_ENGINE_EVENT_SHAKE_ALWAYS_ON	  = (MOTION_SENSOR << 16) | 0x1000,
	MOTION_ENGINE_EVENT_SMART_RELAY			= (MOTION_SENSOR << 16) | 0x2000,

	ORIENTATION_RAW_DATA_EVENT		= (ORIENTATION_SENSOR << 16) | 0x0001,

	TILT_RAW_DATA_EVENT	  = (TILT_SENSOR << 16) | 0x0001,

	GYROSCOPE_UNCAL_RAW_DATA_EVENT  = (GYROSCOPE_UNCAL_SENSOR << 16) | 0x0001,

	FUSION_EVENT = (FUSION_SENSOR << 16) | 0x0001,
	FUSION_GYROSCOPE_UNCAL_EVENT = (FUSION_SENSOR << 16) | 0x0002,
	FUSION_CALIBRATION_NEEDED_EVENT = (FUSION_SENSOR << 16) | 0x0003,
	FUSION_ORIENTATION_ENABLED = (FUSION_SENSOR << 16) | 0x0004,
	FUSION_ROTATION_VECTOR_ENABLED = (FUSION_SENSOR << 16) | 0x0005,
	FUSION_GAMING_ROTATION_VECTOR_ENABLED = (FUSION_SENSOR << 16) | 0x0006,
	FUSION_GEOMAGNETIC_ROTATION_VECTOR_ENABLED = (FUSION_SENSOR << 16) | 0x0007,
	FUSION_TILT_ENABLED = (FUSION_SENSOR << 16) | 0x0008,
	FUSION_GYROSCOPE_UNCAL_ENABLED = (FUSION_SENSOR << 16) | 0x0009,
};

#define CALIBRATION_EVENT(sensor_type) (((sensor_type) << 16) | 0x2)

#define ACCELEROMETER_EVENT_ROTATION_CHECK ((ACCELEROMETER_SENSOR << 16) | 0x0100)

#define ACCELEROMETER_ORIENTATION_DATA_SET (ACCELEROMETER_SENSOR << 16) | 0x0002
#define ACCELEROMETER_LINEAR_ACCELERATION_DATA_SET (ACCELEROMETER_SENSOR << 16) | 0x0004
#define ACCELEROMETER_GRAVITY_DATA_SET (ACCELEROMETER_SENSOR << 16) | 0x0008

#define ACCELEROMETER_EVENT_GRAVITY_DATA_REPORT_ON_TIME (ACCELEROMETER_SENSOR << 16) | 0x0080
#define ACCELEROMETER_EVENT_LINEAR_ACCELERATION_DATA_REPORT_ON_TIME (ACCELEROMETER_SENSOR << 16) | 0x0040
#define ACCELEROMETER_EVENT_ORIENTATION_DATA_REPORT_ON_TIME (ACCELEROMETER_SENSOR << 16) | 0x0020
#define GEOMAGNETIC_EVENT_ATTITUDE_DATA_REPORT_ON_TIME (GEOMAGNETIC_SENSOR << 16) | 0x0004
#define ACCELEROMETER_EVENT_CALIBRATION_NEEDED 0x01
#define ACCELEROMETER_EVENT_SET_WAKEUP 0x02

#define TEMPERATURE_BASE_DATA_SET TEMPERATURE_RAW_DATA_EVENT
#define TEMPERATURE_EVENT_RAW_DATA_REPORT_ON_TIME TEMPERATURE_RAW_DATA_EVENT

#define ACCELEROMETER_BASE_DATA_SET ACCELEROMETER_RAW_DATA_EVENT
#define ACCELEROMETER_EVENT_RAW_DATA_REPORT_ON_TIME ACCELEROMETER_RAW_DATA_EVENT
#define ACCELEROMETER_EVENT_UNPROCESSED_DATA_REPORT_ON_TIME ACCELEROMETER_UNPROCESSED_DATA_EVENT

#define GYRO_BASE_DATA_SET GYROSCOPE_RAW_DATA_EVENT
#define GYROSCOPE_EVENT_RAW_DATA_REPORT_ON_TIME GYROSCOPE_RAW_DATA_EVENT
#define GYROSCOPE_EVENT_UNPROCESSED_DATA_REPORT_ON_TIME GYROSCOPE_UNPROCESSED_DATA_EVENT

#define PROXIMITY_BASE_DATA_SET PROXIMITY_CHANGE_STATE_EVENT
#define PROXIMITY_DISTANCE_BASE_DATA_SET PROXIMITY_STATE_EVENT
#define PROXIMITY_EVENT_CHANGE_STATE PROXIMITY_CHANGE_STATE_EVENT
#define PROXIMITY_EVENT_STATE_REPORT_ON_TIME PROXIMITY_STATE_EVENT
#define PROXIMITY_EVENT_DISTANCE_DATA_REPORT_ON_TIME PROXIMITY_DISTANCE_DATA_EVENT

#define PRESSURE_BASE_DATA_SET PRESSURE_RAW_DATA_EVENT
#define PRESSURE_EVENT_RAW_DATA_REPORT_ON_TIME PRESSURE_RAW_DATA_EVENT

#define GEOMAGNETIC_BASE_DATA_SET GEOMAGNETIC_RAW_DATA_EVENT
#define GEOMAGNETIC_RAW_DATA_SET GEOMAGNETIC_RAW_DATA_EVENT
#define GEOMAGNETIC_EVENT_RAW_DATA_REPORT_ON_TIME GEOMAGNETIC_RAW_DATA_EVENT
#define GEOMAGNETIC_EVENT_CALIBRATION_NEEDED GEOMAGNETIC_CALIBRATION_NEEDED_EVENT
#define GEOMAGNETIC_EVENT_UNPROCESSED_DATA_REPORT_ON_TIME GEOMAGNETIC_UNPROCESSED_DATA_EVENT

#define AUTO_ROTATION_BASE_DATA_SET AUTO_ROTATION_CHANGE_STATE_EVENT
#define AUTO_ROTATION_EVENT_CHANGE_STATE AUTO_ROTATION_CHANGE_STATE_EVENT

#define LIGHT_LUX_DATA_SET LIGHT_LUX_DATA_EVENT
#define LIGHT_BASE_DATA_SET LIGHT_LEVEL_DATA_EVENT
#define LIGHT_EVENT_LUX_DATA_REPORT_ON_TIME LIGHT_LUX_DATA_EVENT
#define LIGHT_EVENT_LEVEL_DATA_REPORT_ON_TIME LIGHT_LEVEL_DATA_EVENT
#define LIGHT_EVENT_CHANGE_LEVEL LIGHT_CHANGE_LEVEL_EVENT

#define GRAVITY_BASE_DATA_SET GRAVITY_RAW_DATA_EVENT
#define GRAVITY_EVENT_RAW_DATA_REPORT_ON_TIME GRAVITY_RAW_DATA_EVENT

#define ORIENTATION_BASE_DATA_SET ORIENTATION_RAW_DATA_EVENT
#define ORIENTATION_EVENT_RAW_DATA_REPORT_ON_TIME ORIENTATION_RAW_DATA_EVENT
#define ORIENTATION_EVENT_CALIBRATION_NEEDED ORIENTATION_CALIBRATION_NEEDED_EVENT

#define LINEAR_ACCEL_BASE_DATA_SET LINEAR_ACCEL_RAW_DATA_EVENT
#define LINEAR_ACCEL_EVENT_RAW_DATA_REPORT_ON_TIME LINEAR_ACCEL_RAW_DATA_EVENT

#define CONTEXT_BASE_DATA_SET CONTEXT_REPORT_EVENT
#define CONTEXT_EVENT_REPORT CONTEXT_REPORT_EVENT

enum accelerometer_rotate_state {
	ROTATION_UNKNOWN = 0,
	ROTATION_LANDSCAPE_LEFT = 1,
	ROTATION_PORTRAIT_TOP = 2,
	ROTATION_PORTRAIT_BTM = 3,
	ROTATION_LANDSCAPE_RIGHT = 4,
	ROTATION_EVENT_0 = 2,
	ROTATION_EVENT_90 = 1,
	ROTATION_EVENT_180 = 3,
	ROTATION_EVENT_270 = 4,
};

enum motion_snap_event {
	MOTION_ENGIEN_SNAP_NONE			= 0,
	MOTION_ENGIEN_NEGATIVE_SNAP_X	= 1,
	MOTION_ENGIEN_POSITIVE_SNAP_X	= 2,
	MOTION_ENGIEN_NEGATIVE_SNAP_Y	= 3,
	MOTION_ENGIEN_POSITIVE_SNAP_Y	= 4,
	MOTION_ENGIEN_NEGATIVE_SNAP_Z	= 5,
	MOTION_ENGIEN_POSITIVE_SNAP_Z	= 6,
	MOTION_ENGIEN_SNAP_LEFT			= MOTION_ENGIEN_NEGATIVE_SNAP_X,
	MOTION_ENGIEN_SNAP_RIGHT		= MOTION_ENGIEN_POSITIVE_SNAP_X,
	MOTION_ENGINE_SNAP_NONE			= 0,
	MOTION_ENGINE_NEGATIVE_SNAP_X	= 1,
	MOTION_ENGINE_POSITIVE_SNAP_X	= 2,
	MOTION_ENGINE_NEGATIVE_SNAP_Y	= 3,
	MOTION_ENGINE_POSITIVE_SNAP_Y	= 4,
	MOTION_ENGINE_NEGATIVE_SNAP_Z	= 5,
	MOTION_ENGINE_POSITIVE_SNAP_Z	= 6,
	MOTION_ENGINE_SNAP_LEFT			= MOTION_ENGINE_NEGATIVE_SNAP_X,
	MOTION_ENGINE_SNAP_RIGHT		= MOTION_ENGINE_POSITIVE_SNAP_X,
};

enum motion_shake_event {
	MOTION_ENGIEN_SHAKE_NONE		= 0,
	MOTION_ENGIEN_SHAKE_DETECTION	= 1,
	MOTION_ENGIEN_SHAKE_CONTINUING	= 2,
	MOTION_ENGIEN_SHAKE_FINISH		= 3,
	MOTION_ENGINE_SHAKE_BREAK		= 4,
	MOTION_ENGINE_SHAKE_NONE		= 0,
	MOTION_ENGINE_SHAKE_DETECTION	= 1,
	MOTION_ENGINE_SHAKE_CONTINUING	= 2,
	MOTION_ENGINE_SHAKE_FINISH		= 3,
};

enum motion_doubletap_event {
	MOTION_ENGIEN_DOUBLTAP_NONE			= 0,
	MOTION_ENGIEN_DOUBLTAP_DETECTION	= 1,
	MOTION_ENGINE_DOUBLTAP_NONE			= 0,
	MOTION_ENGINE_DOUBLTAP_DETECTION	= 1,
};

enum motion_top_to_bottom_event {
	MOTION_ENGIEN_TOP_TO_BOTTOM_NONE		= 0,
	MOTION_ENGIEN_TOP_TO_BOTTOM_WAIT		= 1,
	MOTION_ENGIEN_TOP_TO_BOTTOM_DETECTION	= 2,
	MOTION_ENGINE_TOP_TO_BOTTOM_NONE		= 0,
	MOTION_ENGINE_TOP_TO_BOTTOM_WAIT		= 1,
	MOTION_ENGINE_TOP_TO_BOTTOM_DETECTION	= 2,
};

enum motion_direct_call_event_t {
	MOTION_ENGINE_DIRECT_CALL_NONE,
	MOTION_ENGINE_DIRECT_CALL_DETECTION,
};

enum motion_smart_relay_event_t {
	MOTION_ENGINE_SMART_RELAY_NONE,
	MOTION_ENGINE_SMART_RELAY_DETECTION,
};

enum motion_tilt_to_unlock_event_t {
	MOTION_ENGINE_TILT_TO_UNLOCK_NONE,
	MOTION_ENGINE_TILT_TO_UNLOCK_DETECTION,
};

enum motion_lock_execute_camera_event_t {
	MOTION_ENGINE_LOCK_EXECUTE_CAMERA_NONE,
	MOTION_ENGINE_LOCK_EXECUTE_CAMERA_L_DETECTION,
	MOTION_ENGINE_LOCK_EXECUTE_CAMERA_R_DETECTION,
};

enum motion_smart_alert_t {
	MOTION_ENGINE_SMART_ALERT_NONE,
	MOTION_ENGINE_SMART_ALERT_DETECTION,
};

enum motion_no_move_t {
	MOTION_ENGINE_NO_MOVE_NONE,
	MOTION_ENGINE_NO_MOVE_DETECTION,
};

#ifdef __cplusplus
}
#endif

#endif //__SENSOR_DEPRECATED_H__

